플러터 로그인 회원가입 기능

1. 로그인 회원가입 프로젝트 열기

	1) 프로젝트 fork
	-> 깃허브 https://github.com/dhyash-simform/login_and_register_app 접속
	-> 내 레포지토리에 fork 하기

	2) 프로젝트 clone
	-> 깃허브 내 레포지토리에서 프로젝트 들어가기
	-> Code -> SSH 주소 복사하기
	-> 파워쉘 열기
	-> 내 로컬 안드로이드 프로젝트 폴더로 이동하기
	-> git clone $(프로젝트 SSH 주소)

	3) 프로젝트 열기
	-> 안드로이드 스튜디오 실행
	-> clone한 프로젝트 폴더 열기
	-> puspec.yaml 파일 있는지 확인하기

	4) 프로젝트 실행해보기
	-> Device Manager -> 가상 디바이스 실행
	-> Run 버튼 눌러 실행하기

2. 프로젝트 코드 읽어보기 (기본)

	어려워 보이는 부분은 나중에 알아보고 대충 돌아가는 방식만 알아보자
	쉬워보이는 핵심 코드 Ctrl + 클릭 으로 들어가보기

	1) main.dart
		프로젝트를 열어 가장 먼저 코드를 확인하는 부분

		runApp(const LoginRegisterApp()) :
			앱을 실행하는 부분?

		LoginRegisterApp()
			Ctrl+클릭 해서 login_register_app.dart 파일로 이동
			LoginRegisterApp 이 다른 이름(App, MainApp, ...)인 경우도 있음
			다른 파일로 분리 안되고 main.dart에 포함되어 있는 경우도 있음

	2) login_register_app.dart
		LoginRegisterApp 클래스 정의되어 있음
		build 함수에서 MaterialApp() 을 실행해 리턴함

		MaterialApp() 인자
		- initialRoute: AppRoutes.login,
			시작 라우트 : 앱 실행시 최초 보여줄 기능
			시작 라우트가 login 으로 설정되어 있음
			이 부분 수정하면 앱 실행시 최초 화면 바뀜
			AppRoutes.login Ctrl+클릭 해서 app_routes.dart 파일로 이동

		- onGenerateRoute: Routes.generateRoute,
			뭐하는 코드인지 잘 모름
			Routes.generateRoute Ctrl+클릭 해서 routes.dart 파일로 이동

	3) app_routes.dart
		AppRoutes 클래스 정의되어 있음
		'login', 'register' 가 상수로 선언되어 있음

	4) routes.dart
		Routes 클래스 정의되어 있음

		switch문
			조건으로 들어오는 문자열에 따라 맞는 페이지 반환해줌
			case 문 추가해서 페이지 추가 가능
			페이지 추가할 때 추가로 필요한 것들
			- app_routes.dart 에 추가할 페이지의 경로명 상수 정의
			- lib -> screens 에 추가할 페이지의 screen.dart 파일 정의

3. 화면 추가하기

	1) routes.dart 에 화면 추가하기
	-> switch문에 case 추가하기
		case AppRoutes.home:
		  return getRoute(widget: const HomePage());
	-> home 은 추가할 라우트 이름
	-> HomePage 는 추가할 스크린의 클래스 이름

	2) app_routes.dart 에 상수 추가하기
	-> home 상수 선언하기
		static const String home = 'home';
	-> home 은 추가할 라우트 이름

	3) 스크린 파일 만들기
	-> lib -> screens 폴더에 home_screen.dart 파일 생성

	4) screen 파일 StatefulWidget 구조로 만들기
	-> 첫줄에서 컨트롤+스페이스(커맨드+스페이스) 누르고 stful 입력후 엔터
	-> class 이름 만들고 싶은 페이지 이름(HomePage)으로 적고 엔터
	-> StatefulWidget 글자에 빨간줄 뜨면 알트+엔터 후 두번째 import문 선택하기
     		: import library 'package:flutter/material.dart'

	5) Scaffold로 만들기
	-> return 문에 Placeholder로 되어 있는거 Scaffold로 바꾸기

	6) Scaffold 구성하기
	-> Scaffold 괄호 안에 body: Text("Home Page") 입력

	7) Text 에다가 커서 찍어두고 알트+엔터 후 Wrap 옵션들 확인해보기
	-> Wrap(감싸기)으로 텍스트나 여러 요소들을 다양한 위젯?으로 감쌀 수 있음
		Wrap with Center, Wrap with Column 등등
		나중에 검색해보기

	8) routes.dart 에 import 문 추가하기
	-> case 문 안에 HomePage()가 에러 나있을 것
	-> HomePage() Alt+엔터 로 home_screen.dart 임포트 해주기
		: import 'screens/home_screen.dart';

	9) 추가한 화면이 제일 처음 실행되도록 설정하기
	-> login_register_app.dart 열기
	-> initialRoute 를 AppRoutes.home 으로 변경

	10) Run 버튼 눌러 실행해보기

4. 프로젝트 코드 읽어보기 (login_screen.dart)

	1) 사전 지식 - 플러터 라이프 사이클

		플러터 앱에서는 위젯(화면)의 생성부터 파기까지의 위젯의 생명주기가 관리 되어
		필요에 따라 시작, 종료, 백그라운드 실행 등 특정 상태를 수행함
		중요한 두 개의 생명주기
		- initState() : 위젯을 시작하는 주기, 화면의 시작
		- dispose() : 위젯을 처분(파기)하는 주기, 화면의 끝

	2) void initState() { ... }
		화면을 시작할 때 수행되어야 하는 작업을 실행되는 함수
		내부에서 initializeControllers(); 를 실행

	3) void dispose() { ... }
		화면을 종료할 때 수행되어야 하는 작업을 실행되는 함수
		내부에서 disposeControllers(); 를 실행

	4) void initializeControllers() { ... }
		emailController 와 passwordController 를 초기화하는 작업을 수행
		- emailController : email이 입력되는 것을 감지
		- passwordController : 비밀번호가 입력되는 것을 감지
		두 컨트롤러를 TextEditingController() 로 초기화
		TextEditingController에 addListener() 함수로 controllerListener 추가

	5) void controllerListener() { ... }
		입력된 email 과 password 를 검증하는 함수
		AppRegex 클래스에 정의한 기준으로 검증
		검증 결과를 반환

	5) void disposeControllers() { ... }
		emailController 와 passwordController 를 종료하는 작업을 수행
		각 컨트롤러 객체를 멤버함수인 dispose()로 종료시킴

	6) Widget build(BuildContext context) { ... }
		화면 빌드하는 함수
		Scaffold( ... ) 를 반환
		Scaffold 내에 적힌 내용을 보고 화면 구성

	7) Scaffold( ... )
		Text 에 적힌 내용을 Ctrl+클릭 으로 확인할 수 있음
		AppStrings.변수명 -> app_string.dart 파일에서 변수 값 수정시 화면의 문자열 수정 가능

    8) Text가 Login인 FilledButton 버튼
        onPressed : 버튼 누르면 수행할 동작
        isValid ? ... : ...
            isValid 가 참인 경우 showSnackBar 로 loggedIn 문자열 출력
            isValid 가 거짓인 경우 null

    9) Text가 register인 TextButton 버튼
        onPressed : 버튼 누르면 수행할 동작
        NavigationHelper.pushReplacementNamed( ... ) : 인자로 준 화면으로 이동(현제 화면은 제거)
        AppRoutes.register, // register 화면 경로

5. Firebase 연결

    1) Firebase 홈페이지 접속
        https://firebase.google.com/

    2) Firebase 프로젝트 생성
        시작하기 클릭
        프로젝트 추가 클릭
        Google 애널리틱스 구성
        Default Account for Firebase 선택

    3) Flutter 앱에 Firebase 추가
        생성한 프로젝트 선택
        플러터 아이콘 클릭

    3-1) Firebase CLI 설치
        윈도우 PowerShell 에서 설치
        -> npm install -g firebase-tools

    3-2) Firebse CLI 테스트
        윈도우 PowerShell 에서 테스트
        파이어베이스 로그인
            firebase login
        로그인 안되어있다면 구글 계정으로 로그인
        파이어베이스 프로젝트 리스트 조회
            firebase projects:list
        내 프로젝트 리스트가 모두 출력되는지 확인

    3-3) Firebase CLI 설치 및 실행
        화면에 출력된 코드 그대로 Android Studio 터미널에 복붙
            dart pub global activate flutterfire_cli
            flutterfire configure --project=$(파이어베이스 프로젝트 이름)
        지원할 플랫폼 선택(android, ios, macos, web 중 필요없는거 스페이스로 제외)

    3-4) Firebase 초기화 및 플러그인 추가
        파이어베이스를 플러터 프로젝트에서 실행하는 코드를 삽입하는 것
        Android Studio 터미널에 firebase 모듈 추가
            flutter pub add firebase_core
            (dart pub install firebase_core 일수도 있음 안되면 해볼것)
        Pub get 버튼 클릭

        파이어베이스 웹사이트 화면에 출력된 코드 main.dart 에 삽입
            await Firebase.initializeApp(
              options: DefaultFirebaseOptions.currentPlatform,
            );
        Firebase 의 빨간줄 Alt+엔터 해서 firebase_core.dart 를 import
        await 의 빨간줄 Alt+엔터 해서 async 추가

6. Firebase auth 기능 추가하기

    1) firebase_auth 플러터 패키지 추가하기
        Android Studio 터미널에서 다음 명령어 입력
            flutter pub add firebase_auth
        Pub get 버튼 클릭

    2) Firebase auth service 파일 생성
        lib -> utils 에 fb_service.dart 파일 생성
        이 텍스트 파일과 함께 저장된 "flutter class2 자료 - fb_service.dart" 파일의 코드 그대로 복붙

    3) login 화면에 Firebase auth service 객체 생성
        login_screen.dart 파일에 파이어베이스 인증 서비스 객체 생성
            final FirebaseAuthService _authService = FirebaseAuthService();
        FirebaseAuthService 빨간줄 Alt+엔터 해서 fb_service.dart 를 import

    4) login 버튼 클릭시 파이어베이스에 인증 요청 보내기
        login_screen.dart 파일에서 login 버튼 찾기
        onPressed 의 isValid 가 참일 때의 실행문 수정
            _authService.signInWithEmailAndPassword( // 이메일, 비밀번호로 로그인 요청 보내기
              emailController.text,     // 이메일 텍스트
              passwordController.text,  // 비밀번호 텍스트
            );

    5) register 화면에 Firebase auth service 객체 생성
        3)의 방법과 동일

    6) register 버튼 클릭시 파이어베이스에 가입 요청 보내기
        register_screen.dart 파일에서 register 버튼 찾기
        onPressed 의 isValid 가 참일 때의 실행문 수정
            _authService.signUpWithEmailAndPassword( // 이메일, 비밀번호로 가입 요청 보내기
              emailController.text,
              passwordController.text,
            );

7. Firebase auth 테스트 하기

    1) 어플 실행해서 회원가입 해보기

    2) 파이어베이스에 저장되는지 확인해보기
        Firebas 콘솔 -> 내 프로젝트 -> Authentication -> Users 에
        내가 입력한 정보 입력되어 있는지 확인하기

    3) 어플에서 로그인 해보기
        나는 fb_service.dart 에 로그인 성공시 성공 메시지 출력하게 만들어둠
        로그인 성공하면 안드로이드 스튜디오 콘솔에 성공했다고 출력됨

8. 로그인 성공시 메인 페이지 이동하기

    방법 1.
        login_screen.dart 에서 FirebaseAuthService 의 객체 _authService 를 생성했었음
        _authService.signInWithEmailAndPassword() 의 반환값을 보고 직접 판단 조건을 걸고
        NavigationHelper.pushReplacementNamed() 사용해 페이지 이동

    방법 2.
        fb_service.dart 에서 FirebaseAuth 의 객체 _auth 를 생성했었음
        _auth.signInWithEmailAndPassword() 의 응답에서 FirebaseAuthException 가 catch 되지 않는 경우
        NavigationHelper.pushReplacementNamed() 사용해 페이지 이동

    차이점

        방법 1은 우리가 만든 FirebaseAuthService 클래스의 함수 반환값에 따라 페이지 이동(직접 이동 조건 넣기)
        방법 2는 설치한 FirebaseAuth 패키지의 함수 응답에 따라 페이지 이동(catch 문으로 안넘어가면 이동)

        방법 1은 login_screen.dart 파일에서 화면 이동 -> 클래스의 역할에 합당함
        방법 2는 fb_service.dart 파일에서 화면 이동 -> 클래스의 역할의 범위에서 벗어났다고 볼 수도 있음

    화면이동 코드
        NavigationHelper.pushReplacementNamed(
          AppRoutes.home,
        );